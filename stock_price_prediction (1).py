# -*- coding: utf-8 -*-
"""Stock_Price_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mADvxiPME9UUp8rKFgbmv4zArrxmmNwz
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

pip install yfinance

import yfinance as yf

# Download stock price data for Apple (AAPL) from the last 5 years
stock_data = yf.download('AAPL', start='2019-01-01', end='2024-01-01')

# Display the first few rows
print(stock_data.head())

# Save to a CSV file
stock_data.to_csv('apple_stock_data.csv')

# Summary statistics
print(stock_data.describe())

# Check for any missing values
print(stock_data.isnull().sum())

plt.figure(figsize=(10, 5))
plt.plot(stock_data['Close'], label='Closing Price')
plt.title('Historical Closing Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

plt.figure(figsize=(10, 5))
plt.plot(stock_data['Open'], label='Opening Price')
plt.title('Historical Opening Prices')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()

plt.figure(figsize=(10, 5))
plt.plot(stock_data['Volume'], label='volume')
plt.title('Historical Traded Volumes')
plt.xlabel('Date')
plt.ylabel('Quantity')
plt.legend()
plt.show()

stock_data.isnull().sum()

# 7-day moving average
stock_data['MA7'] = stock_data['Close'].rolling(window=7).mean()

# 30-day moving average
stock_data['MA30'] = stock_data['Close'].rolling(window=30).mean()

# 50-day moving average
stock_data['MA50'] = stock_data['Close'].rolling(window=50).mean()

# Daily returns
stock_data['Daily_Return'] = stock_data['Close'].pct_change()

# Volatility over a 10-day period
stock_data['Volatility'] = stock_data['Close'].rolling(window=10).std()

stock_data.drop(['Open', 'High', 'Low', 'Volume', 'Adj Close'], axis=1, inplace=True)

stock_data.dropna(inplace=True) #Handling missing values

X = stock_data.drop(['Close'], axis=1)
y = stock_data['Close']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

Lr = LinearRegression()

Lr.fit(X_train, y_train)

y_pred = Lr.predict(X_test)

from sklearn.metrics import mean_squared_error, r2_score

mse = mean_squared_error(y_test, y_pred)

mse

rmse = mse ** 0.5

rmse

r2 = r2_score(y_test, y_pred)

print(f'MSE: {mse}, RMSE: {rmse}, RÂ²: {r2}')

from sklearn.model_selection import cross_val_score

# Perform cross-validation
cv_scores = cross_val_score(Lr, X, y, cv=5, scoring='neg_mean_squared_error')

# Calculate the mean and standard deviation of the scores
mean_cv_score = -cv_scores.mean()  # Convert back to positive MSE
std_cv_score = cv_scores.std()

print(f'Cross-Validated MSE: {mean_cv_score}, Std: {std_cv_score}')

"""Model Deployment"""

import pickle

# Save the model to a file
with open('stock_price_model.pkl', 'wb') as f:
    pickle.dump(Lr, f)

from flask import Flask, request, jsonify
import pickle

app = Flask(__name__)

# Load the model
with open('stock_price_model.pkl', 'rb') as f:
    model = pickle.load(f)

@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    prediction = model.predict([data['features']])
    return jsonify({'prediction': prediction[0]})

if __name__ == '__main__':
    app.run(debug=True)

