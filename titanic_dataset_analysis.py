# -*- coding: utf-8 -*-
"""Titanic_Dataset Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d_9rhcwDHmkiVcJ0wz4GWY1rpXhUI4rF
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Titanic-Dataset.csv')

dataset = pd.DataFrame(df)

df.head()

df

df.isnull().sum()

sns.heatmap(df.isnull())

df.drop(['Cabin'],axis=1)

# replacing null values with the average age for each passenger class
def impute_age(cols):
   Age=cols[0]
   Pclass=cols[1]

   if pd.isnull(Age):

    if Pclass==1:
       return 42
    elif Pclass==2:
       return 25
    else:
       return 23
   else:
    return Age

# check for every age and replace missing values according to impute age function
df['Age']=df[['Age','Pclass']].apply(impute_age,axis=1)

df=df.drop(['Cabin'],axis=1)

sns.heatmap(df.isnull(),cmap='viridis')

df['Embarked']

df['Embarked'].isnull().sum()

df = df.dropna(subset=['Embarked'])

print(df['Embarked'].isnull().sum())

df

sns.heatmap(df.isnull(),cmap='viridis')

"""Exploaratory data analysis"""

df['Sex'] = df['Sex'].map({'male': 0, 'female': 1})

df.head()

"""Exploaratory data Analysis"""

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Sex',data=df,palette='rainbow')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Pclass',data=df,palette='rainbow')

sns.set_style('whitegrid')
sns.countplot(x='Survived',hue='Parch',data=df,palette='rainbow')

# Remove decimal places from the 'Fare' column
df['Fare'] = df['Fare'].astype(int)

# Remove decimal places from the 'Age' column
df['Age'] = df['Age'].astype(int)

# Convert the 'Ticket' column to string type
df['Ticket'] = df['Ticket'].astype(str)

# Extract the numeric part of the 'Ticket' column, filling NaN with a placeholder
df['Ticket'] = df['Ticket'].str.extract('(\d+)', expand=False).fillna('0')

# Convert the extracted string to integers
df['Ticket'] = df['Ticket'].astype(int)

"""Converting into Categorical Features"""

pd.get_dummies(df['Embarked'],drop_first=True).head()

embark=pd.get_dummies(df['Embarked'],drop_first=True)

df.drop(['Embarked'],axis=1,inplace=True)

df=pd.concat([df,embark],axis=1)

"""Mapping (use the Categorical Or Mapping)"""

# Convert 'Embarked' column to numerical values
df['Embarked'] = df['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})

df=df.drop(['Name'],axis=1)

df

"""Train test Split"""

from sklearn.model_selection import train_test_split

X = df.drop('Survived',axis=1)
y = df['Survived']

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.50, random_state=101)

from sklearn.linear_model import LogisticRegression

lr = LogisticRegression()

lr.fit(X_train,y_train)

y_pred = lr.predict(X_test)

from sklearn.metrics import accuracy_score

accuracy = accuracy_score(y_test,y_pred)

accuracy

from sklearn.neighbors import KNeighborsClassifier

knc = KNeighborsClassifier(n_neighbors=3)

knc.fit(X_train,y_train)

y_pred = knc.predict(X_test)

accuracy = accuracy_score(y_test,y_pred)

accuracy

from sklearn.model_selection import GridSearchCV

param_grid = {'n_neighbors': range(1, 21)}
grid_search = GridSearchCV(KNeighborsClassifier(), param_grid, cv=5)
grid_search.fit(X_train, y_train)

print(f'Best k: {grid_search.best_params_["n_neighbors"]}')

y_pred = grid_search.predict(X_test)

accuracy = accuracy_score(y_test,y_pred)

accuracy

from sklearn.model_selection import cross_val_score

scores = cross_val_score(knc, X, y, cv=5)
print(f'Cross-validated scores: {scores}')

from sklearn.metrics import confusion_matrix, precision_score, recall_score

cm = confusion_matrix(y_test, y_pred)
print(f'Confusion Matrix:\n{cm}')

ps = precision_score(y_test, y_pred)
print(f'Precision Score: {ps}')

rs = recall_score(y_test, y_pred)
print(f'Recall Score: {rs}')

